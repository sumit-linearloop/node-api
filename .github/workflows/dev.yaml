# # name: dev branch deployment

# # on:
# #   push:
# #     branches:
# #       - dev

# # env:
# #   DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
# #   DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
# #   BUILD_NUMBER: ${{ github.run_number }}

# # jobs:
# #   build-and-push:
# #     runs-on: ubuntu-latest

# #     steps:
# #       - name: Checkout code
# #         uses: actions/checkout@v2

# #       - name: Login to Docker Hub
# #         uses: docker/login-action@v1
# #         with:
# #           username: ${{ env.DOCKER_USERNAME }}
# #           password: ${{ env.DOCKER_PASSWORD }}

# #       - name: Set up Docker Buildx
# #         uses: docker/setup-buildx-action@v1

# #       - name: Build Docker image
# #         run: |
# #           docker build --no-cache -t dev-api:latest -f Dockerfile.dev .

# #       - name: Tag Docker image with Docker Hub username
# #         run: |
# #           docker tag dev-api:latest ${{ env.DOCKER_USERNAME }}/dev-api:latest

# #       - name: Push Docker image with 'latest' tag
# #         run: |
# #           docker push ${{ env.DOCKER_USERNAME }}/dev-api:latest

# #       - name: Tag Docker image with build number
# #         run: |
# #           docker tag dev-api:latest ${{ env.DOCKER_USERNAME }}/dev-api:${{ env.BUILD_NUMBER }}
# #           docker push ${{ env.DOCKER_USERNAME }}/dev-api:${{ env.BUILD_NUMBER }}


# #   deploy:
# #     runs-on: ubuntu-latest
# #     needs: build-and-push
# #     steps:
# #       - name: Checkout code
# #         uses: actions/checkout@v2

# #       - name: Set up AWS CLI
# #         uses: aws-actions/configure-aws-credentials@v2
# #         with:
# #           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
# #           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
# #           aws-region: us-east-1

# #       - name: Install kubectl
# #         run: |
# #           curl -LO "https://dl.k8s.io/release/v1.30.3/bin/linux/amd64/kubectl"
# #           chmod +x ./kubectl
# #           sudo mv ./kubectl /usr/local/bin/kubectl
# #           kubectl version --client
      
# #       - name: Update kube config
# #         run: |
# #           mkdir -p $HOME/.kube
# #           export KUBECONFIG=$HOME/.kube/config
# #           aws eks update-kubeconfig --region us-east-1 --name ci-cd-pipeline

# #       - name: Deploy to Kubernetes
# #         run: |
# #           kubectl apply -f dev.yaml

# name: dev branch deployment

# on:
#   push:
#     branches:
#       - dev

# env:
#   DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
#   DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
#   BUILD_NUMBER: ${{ github.run_number }}

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Login to Docker Hub
#         uses: docker/login-action@v1
#         with:
#           username: ${{ env.DOCKER_USERNAME }}
#           password: ${{ env.DOCKER_PASSWORD }}

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v1

#       - name: Build Docker image
#         run: |
#           docker build --no-cache -f Dockerfile.dev -t dev-api:latest .

#       - name: Tag Docker image with Docker Hub username
#         run: |
#           docker tag dev-api:latest ${{ env.DOCKER_USERNAME }}/dev-api:latest

#       - name: Push Docker image with 'latest' tag
#         run: |
#           docker push ${{ env.DOCKER_USERNAME }}/dev-api:latest

#       - name: Tag Docker image with build number
#         run: |
#           docker tag dev-api:latest ${{ env.DOCKER_USERNAME }}/dev-api:${{ env.BUILD_NUMBER }}
#           docker push ${{ env.DOCKER_USERNAME }}/dev-api:${{ env.BUILD_NUMBER }}

#   deploy:
#     runs-on: ubuntu-latest
#     needs: build-and-push

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up AWS CLI
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: us-east-1

#       - name: Install kubectl
#         run: |
#           curl -LO "https://dl.k8s.io/release/v1.30.3/bin/linux/amd64/kubectl"
#           chmod +x ./kubectl
#           sudo mv ./kubectl /usr/local/bin/kubectl
#           kubectl version --client
      
#       - name: Update kube config
#         run: |
#           mkdir -p $HOME/.kube
#           export KUBECONFIG=$HOME/.kube/config
#           aws eks update-kubeconfig --region us-east-1 --name ci-cd-pipeline

#       - name: Deploy to Kubernetes
#         run: |
#           ls -la
#           kubectl apply -f dev-api.yaml
#           kubectl rollout restart deployment/sumit-dev-deployment
#           kubectl rollout status deployment/sumit-dev-deployment






# name: sumit branch deployment

# on:
#   push:
#     branches:
#       - sumit

# env:
#   DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
#   DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
#   BUILD_NUMBER: ${{ github.run_number }}
#   AWS_REGION: us-east-1
#   SECRET_NAME: Envfile # Replace with your actual secret name

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Login to Docker Hub
#         uses: docker/login-action@v1
#         with:
#           username: ${{ env.DOCKER_USERNAME }}
#           password: ${{ env.DOCKER_PASSWORD }}

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v1

#       - name: Build Docker image
#         run: |
#           docker build --no-cache -f Dockerfile.dev -t dev-api:latest .

#       - name: Tag Docker image with Docker Hub username
#         run: |
#           docker tag dev-api:latest ${{ env.DOCKER_USERNAME }}/dev-api:latest

#       - name: Push Docker image with 'latest' tag
#         run: |
#           docker push ${{ env.DOCKER_USERNAME }}/dev-api:latest

#       - name: Tag Docker image with build number
#         run: |
#           docker tag dev-api:latest ${{ env.DOCKER_USERNAME }}/dev-api:${{ env.BUILD_NUMBER }}
#           docker push ${{ env.DOCKER_USERNAME }}/dev-api:${{ env.BUILD_NUMBER }}

#   deploy:
#     runs-on: ubuntu-latest
#     needs: build-and-push
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
 
#       - name: Set up AWS CLI
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: us-east-1
 
#       - name: Retrieve secrets from AWS Secrets Manager
#         run: |
#           SECRET=$(aws secretsmanager get-secret-value --secret-id ${{ env.SECRET_NAME }} --query SecretString --output text)
#           echo $SECRET > .env
#         env:
#           AWS_REGION: ${{ env.AWS_REGION }}
 
#       - name: Install kubectl
#         run: |
#           curl -LO "https://dl.k8s.io/release/v1.30.3/bin/linux/amd64/kubectl"
#           chmod +x ./kubectl
#           sudo mv ./kubectl /usr/local/bin/kubectl
#           kubectl version --client
 
#       - name: Update kube config
#         run: |
#           mkdir -p $HOME/.kube
#           export KUBECONFIG=$HOME/.kube/config
#           aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ci-cd-pipeline
 
#       - name: Deploy to Kubernetes
#         run: |
#           kubectl apply -f secret.yaml
#           kubectl rollout restart deployment/sumit-dev-deployment
#           kubectl rollout status deployment/sumit-dev-deployment
#           kubectl apply -f dev-api.yaml





# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - sumit

# env:
#   DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
#   DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
#   BUILD_NUMBER: ${{ github.run_number }}
#   AWS_REGION: us-east-1
#   SECRET_NAME: Envfile # Replace with your actual secret name

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Login to Docker Hub
#         uses: docker/login-action@v1
#         with:
#           username: ${{ env.DOCKER_USERNAME }}
#           password: ${{ env.DOCKER_PASSWORD }}

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v1

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: us-east-1

#       - name: Retrieve secrets from AWS Secrets Manager
#         id: retrieve-secrets
#         run: |
#           aws secretsmanager get-secret-value --secret-id ${{ env.SECRET_NAME }} --query 'SecretString' --output text > secrets.json
#           cat secrets.json
#         shell: bash

#       - name: Export secrets as environment variables
#         id: export-secrets
#         run: |
#           export $(jq -r 'to_entries | map("\(.key)=\(.value|tostring)") | .[]' secrets.json)
#         shell: bash

#       - name: Build Docker image
#         run: |
#           docker build --no-cache -f Dockerfile.dev -t dev-api:latest .

#       - name: Tag Docker image with Docker Hub username
#         run: |
#           docker tag dev-api:latest ${{ env.DOCKER_USERNAME }}/dev-api:latest

#       - name: Push Docker image with 'latest' tag
#         run: |
#           docker push ${{ env.DOCKER_USERNAME }}/dev-api:latest

#       - name: Tag Docker image with build number
#         run: |
#           docker tag dev-api:latest ${{ env.DOCKER_USERNAME }}/dev-api:${{ env.BUILD_NUMBER }}
#           docker push ${{ env.DOCKER_USERNAME }}/dev-api:${{ env.BUILD_NUMBER }}

name: CI/CD Pipeline

on:
  push:
    branches:
      - sumit

env:
  DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
  BUILD_NUMBER: ${{ github.run_number }}
  AWS_REGION: us-east-1
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

services:
    sonarqube:
      image: sonarqube:latest
      ports:
        - 9000:9000
      options: --health-cmd="curl -s http://localhost:9000/api/system/health | grep UP" --health-interval=30s --health-timeout=10s --health-retries=3


steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

      - name: Install SonarQube Scanner
        run: npm install -g sonarqube-scanner

      - name: Run SonarQube Scanner
        run: |
          sonar-scanner \
            -Dsonar.projectKey=DevOps \
            -Dsonar.projectName=DevOps \
            -Dsonar.projectVersion=1.0 \
            -Dsonar.sources=. \
            -Dsonar.host.url=http://localhost:9000
            -Dsonar.token=${{ env.SONAR_TOKEN }} \
            -Dsonar.test.inclusions=**/*.test.js \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.exclusions=node_modules/**,coverage/**,dist/**

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Docker image
        run: |
          docker build --no-cache -f Dockerfile.dev -t dev-api:latest .

      - name: Tag Docker image with Docker Hub username
        run: |
          docker tag dev-api:latest ${{ env.DOCKER_USERNAME }}/dev-api:latest

      - name: Push Docker image with 'latest' tag
        run: |
          docker push ${{ env.DOCKER_USERNAME }}/dev-api:latest

      - name: Tag Docker image with build number
        run: |
          docker tag dev-api:latest ${{ env.DOCKER_USERNAME }}/dev-api:${{ env.BUILD_NUMBER }}
          docker push ${{ env.DOCKER_USERNAME }}/dev-api:${{ env.BUILD_NUMBER }}




