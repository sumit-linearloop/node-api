# # # # name: Build and Push Docker Image

# # # # on:
# # # #   push:
# # # #     branches:
# # # #       - main

# # # # env:
# # # #   DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
# # # #   DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}

# # # # jobs:
# # # #   build-and-push:
# # # #     runs-on: ubuntu-latest

# # # #     steps:
# # # #       - name: Checkout code
# # # #         uses: actions/checkout@v2

# # # #       - name: Login to Docker Hub
# # # #         uses: docker/login-action@v1
# # # #         with:
# # # #           username: ${{ env.DOCKER_USERNAME }}
# # # #           password: ${{ env.DOCKER_PASSWORD }}

# # # #       - name: Set up Docker Buildx
# # # #         uses: docker/setup-buildx-action@v1

# # # #       - name: Build Docker image
# # # #         run: docker build -t node-api:latest .

# # # #       - name: Tag Docker image
# # # #         run: docker tag node-api:latest ${{ env.DOCKER_USERNAME }}/node-api:latest

# # # #       - name: Push Docker image
# # # #         run: docker push ${{ env.DOCKER_USERNAME }}/node-api:latest

# # # #       - name: Tag Docker image with build number
# # # #         run: |
# # # #           BUILD_NUMBER=$(date +%s)
# # # #           docker tag node-api:latest ${{ env.DOCKER_USERNAME }}/node-api:${BUILD_NUMBER}
# # # #           docker push ${{ env.DOCKER_USERNAME }}/node-api:${BUILD_NUMBER}



# # # # name: Build and Push Docker Image

# # # # on:
# # # #   push:
# # # #     branches:
# # # #       - main

# # # # env:
# # # #   DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
# # # #   DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}

# # # # jobs:
# # # #   build-and-push:
# # # #     runs-on: ubuntu-latest

# # # #     steps:
# # # #       - name: Checkout code
# # # #         uses: actions/checkout@v2

# # # #       - name: Login to Docker Hub
# # # #         uses: docker/login-action@v1
# # # #         with:
# # # #           username: ${{ env.DOCKER_USERNAME }}
# # # #           password: ${{ env.DOCKER_PASSWORD }}

# # # #       - name: Set up Docker Buildx
# # # #         uses: docker/setup-buildx-action@v1

# # # #       - name: Build Docker image
# # # #         run: docker build -t node-api:latest .

# # # #       - name: Tag Docker image
# # # #         run: docker tag node-api:latest ${{ env.DOCKER_USERNAME }}/node-api:latest

# # # #       - name: Push Docker image
# # # #         run: docker push ${{ env.DOCKER_USERNAME }}/node-api:latest

# # # #       - name: Tag Docker image with build number
# # # #         id: build_number
# # # #         run: |
# # # #           if [ ! -f build_number.txt ]; then
# # # #             echo "0" > build_number.txt
# # # #           fi
# # # #           BUILD_NUMBER=$(cat build_number.txt)
# # # #           BUILD_NUMBER=$((BUILD_NUMBER + 1))
# # # #           echo "$BUILD_NUMBER" > build_number.txt
# # # #           echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
# # # #           docker tag node-api:latest ${{ env.DOCKER_USERNAME }}/node-api:${BUILD_NUMBER}
# # # #           docker push ${{ env.DOCKER_USERNAME }}/node-api:${BUILD_NUMBER}

# name: Build, Push Docker Image and Deploy to Kubernetes

# on:
#   push:
#     branches:
#       - main

# env:
#   DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
#   DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
#   KUBECONFIG: ${{ secrets.KUBE_CONFIG }}

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Login to Docker Hub
#         uses: docker/login-action@v1
#         with:
#           username: ${{ env.DOCKER_USERNAME }}
#           password: ${{ env.DOCKER_PASSWORD }}

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v1

#       - name: Build Docker image
#         run: docker build -t node-api:latest .

#       - name: Tag Docker image
#         run: docker tag node-api:latest ${{ env.DOCKER_USERNAME }}/node-api:latest

#       - name: Push Docker image
#         run: docker push ${{ env.DOCKER_USERNAME }}/node-api:latest

#       - name: Tag Docker image with build number
#         run: |
#           BUILD_NUMBER=$(date +%s)
#           docker tag node-api:latest ${{ env.DOCKER_USERNAME }}/node-api:${BUILD_NUMBER}
#           docker push ${{ env.DOCKER_USERNAME }}/node-api:${BUILD_NUMBER}

#   deploy:
#     runs-on: ubuntu-latest
#     needs: build-and-push
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up AWS CLI
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: us-east-1

#       - name: Set up kubectl
#         uses: azure/setup-kubectl@v1
#         with:
#           version: 'v1.30.3'
      
#       - name: Configure Kubernetes context
#         env:
#           KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
#         run: |
#           base64-kube-config: ${{ secrets.KUBE_CONFIG }}
#           chmod 600 ~/.kube/config

#       - name: Deploy to Kubernetes
#         run: |
#           kubectl apply -f node-api.yaml  # Ensure this path is correct


# name: Node js app deploy to EKS
# on:
#   push:
#     branches: [ "main" ]

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v3

#     - name: Install kubectl
#       run: |     
#         curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
#         chmod +x kubectl
#         sudo mv kubectl /usr/local/bin/

#     - name: Configure AWS Credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: us-east-1

#     - name: Log in to Docker Hubeks
#       uses: docker/login-action@v2
#       with:
#         username: ${{ secrets.DOCKERHUB_USERNAME }}
#         password: ${{ secrets.DOCKERHUB_TOKEN }}

#     - name: Build, tag, and push Docker image
#       run: |
#         docker build -t node-api:latest .
#         docker tag node-api:latest ${{ env.DOCKER_USERNAME }}/node-api:latest
#         docker push ${{ env.DOCKER_USERNAME }}/node-api:latest
#         docker tag node-api:latest ${{ env.DOCKER_USERNAME }}/node-api:${BUILD_NUMBER}
#         docker push ${{ env.DOCKER_USERNAME }}/node-api:${BUILD_NUMBER}

        
#     # - name: Update kubeconfig
#     #   run: aws eks update-kubeconfig --region us-east-1 --name betterbugs

#     - name: Deploy to EKS
#       run: |
#         kubectl apply -f node-api.yaml


# name: Build, Push Docker Image and Deploy to Kubernetes

# on:
#   push:
#     branches:
#       - main

# env:
#   DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
#   DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Login to Docker Hub
#         uses: docker/login-action@v1
#         with:
#           username: ${{ env.DOCKER_USERNAME }}
#           password: ${{ env.DOCKER_PASSWORD }}

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v1

#       - name: Build Docker image
#         run: docker build -t node-api:latest .

#       - name: Tag Docker image
#         run: docker tag node-api:latest ${{ env.DOCKER_USERNAME }}/node-api:latest

#       - name: Push Docker image
#         run: docker push ${{ env.DOCKER_USERNAME }}/node-api:latest

#       - name: Tag Docker image with build number
#         run: |
#           BUILD_NUMBER=$(date +%s)
#           docker tag node-api:latest ${{ env.DOCKER_USERNAME }}/node-api:${BUILD_NUMBER}
#           docker push ${{ env.DOCKER_USERNAME }}/node-api:${BUILD_NUMBER}

#   deploy:
#     runs-on: ubuntu-latest
#     needs: build-and-push
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up AWS CLI
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: us-east-1

#       - name: Install kubectl
#         run: |
#           curl -LO "https://dl.k8s.io/release/v1.30.3/bin/linux/amd64/kubectl"
#           chmod +x ./kubectl
#           sudo mv ./kubectl /usr/local/bin/kubectl
#           kubectl version --client
      
#       - name: Update kube config
#         run: |
#           mkdir -p $HOME/.kube
#           export KUBECONFIG=$HOME/.kube/config
#           aws eks update-kubeconfig --region us-east-1 --name ci-cd-pipeline


#       - name: Deploy to Kubernetes
#         run: |
#           kubectl apply -f node-api.yaml





# name: main branch deployment

# on:
#   push:
#     branches:
#       - main

# env:
#   DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
#   DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
#   BUILD_NUMBER: ${{ github.run_number }}
#   AWS_DEFAULT_REGION: us-east-1
#   AWS_REGION: us-east-1
#   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Login to Docker Hub
#         uses: docker/login-action@v1
#         with:
#           username: ${{ env.DOCKER_USERNAME }}
#           password: ${{ env.DOCKER_PASSWORD }}

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v1

#       - name: Build Docker image
#         run: |
#           docker build --no-cache -f Dockerfile.prod -t node-api:latest .

#       - name: Tag Docker image with Docker Hub username
#         run: |
#           docker tag node-api:latest ${{ env.DOCKER_USERNAME }}/node-api:latest

#       - name: Push Docker image with 'latest' tag
#         run: |
#           docker push ${{ env.DOCKER_USERNAME }}/node-api:latest

#       - name: Tag Docker image with build number
#         run: |
#           docker tag node-api:latest ${{ env.DOCKER_USERNAME }}/node-api:${{ env.BUILD_NUMBER }}
#           docker push ${{ env.DOCKER_USERNAME }}/node-api:${{ env.BUILD_NUMBER }}

#   deploy:
#     runs-on: ubuntu-latest
#     needs: build-and-push

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up AWS CLI
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: us-east-1

#       - name: Install kubectl
#         run: |
#           curl -LO "https://dl.k8s.io/release/v1.30.3/bin/linux/amd64/kubectl"
#           chmod +x ./kubectl
#           sudo mv ./kubectl /usr/local/bin/kubectl
#           kubectl version --client
      
#       - name: Update kube config
#         run: |
#           mkdir -p $HOME/.kube
#           export KUBECONFIG=$HOME/.kube/config
#           aws eks update-kubeconfig --region us-east-1 --name ci-cd-pipeline

#       - name: Deploy to Kubernetes
#         run: |
#           ls -al
#            kubectl rollout restart deployment/sumit-prod-deployment
#            kubectl rollout status deployment/sumit-prod-deployment
#           kubectl apply -f node-api.yaml


name: main branch deployment

on:
  push:
    branches:
      - main

env:
  DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
  BUILD_NUMBER: ${{ github.run_number }}
  AWS_REGION: us-east-1
  SECRET_NAME: Envfile-prod # Replace with your actual secret name

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Docker image
        run: |
          docker build --no-cache -f Dockerfile.prod -t node-api:latest .

      - name: Tag Docker image with Docker Hub username
        run: |
          docker tag node-api:latest ${{ env.DOCKER_USERNAME }}/node-api:latest

      - name: Push Docker image with 'latest' tag
        run: |
          docker push ${{ env.DOCKER_USERNAME }}/node-api:latest

      - name: Tag Docker image with build number
        run: |
          docker tag node-api:latest ${{ env.DOCKER_USERNAME }}/node-api:${{ env.BUILD_NUMBER }}
          docker push ${{ env.DOCKER_USERNAME }}/node-api:${{ env.BUILD_NUMBER }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
 
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
 
      - name: Retrieve secrets from AWS Secrets Manager
        run: |
          SECRET=$(aws secretsmanager get-secret-value --secret-id ${{ env.SECRET_NAME }} --query SecretString --output text)
          echo $SECRET > .env
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
 
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v1.30.3/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
          kubectl version --client
 
      - name: Update kube config
        run: |
          mkdir -p $HOME/.kube
          export KUBECONFIG=$HOME/.kube/config
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ci-cd-pipeline
 
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f secret.yaml
          kubectl rollout restart deployment/sumit-prod-deployment
          kubectl rollout status deployment/sumit-prod-deployment
          kubectl apply -f node-api.yaml


